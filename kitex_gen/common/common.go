// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package common

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type Err int64

const (
	Err_UnknownError               Err = 10000
	Err_BadRequest                 Err = 10001
	Err_Unauthorized               Err = 10002
	Err_Forbidden                  Err = 10003
	Err_NotFound                   Err = 10004
	Err_InternalServerError        Err = 10005
	Err_ServiceUnavailable         Err = 10006
	Err_ResponseUnableParse        Err = 10007
	Err_GatewayBadRequest          Err = 20001
	Err_GatewayTimeout             Err = 20002
	Err_GatewayServiceUnavailable  Err = 20003
	Err_UserNotFound               Err = 30001
	Err_InvalidUserCredentials     Err = 30002
	Err_UserAlreadyExists          Err = 30003
	Err_UserForbidden              Err = 30004
	Err_ProductNotFound            Err = 40001
	Err_ProductOutOfStock          Err = 40002
	Err_ProductInvalidRequest      Err = 40003
	Err_CartItemNotFound           Err = 50001
	Err_CartInvalidOperation       Err = 50002
	Err_CartUpdateFailed           Err = 50003
	Err_OrderNotFound              Err = 60001
	Err_OrderInvalidStatus         Err = 60002
	Err_OrderCreationFailed        Err = 60003
	Err_OrderCancellationFailed    Err = 60004
	Err_PaymentFailed              Err = 70001
	Err_PaymentNotFound            Err = 70002
	Err_PaymentAuthorizationFailed Err = 70003
	Err_InventoryNotAvailable      Err = 80001
	Err_InventoryUpdateFailed      Err = 80002
	Err_InventoryNotFound          Err = 80003
)

func (p Err) String() string {
	switch p {
	case Err_UnknownError:
		return "UnknownError"
	case Err_BadRequest:
		return "BadRequest"
	case Err_Unauthorized:
		return "Unauthorized"
	case Err_Forbidden:
		return "Forbidden"
	case Err_NotFound:
		return "NotFound"
	case Err_InternalServerError:
		return "InternalServerError"
	case Err_ServiceUnavailable:
		return "ServiceUnavailable"
	case Err_ResponseUnableParse:
		return "ResponseUnableParse"
	case Err_GatewayBadRequest:
		return "GatewayBadRequest"
	case Err_GatewayTimeout:
		return "GatewayTimeout"
	case Err_GatewayServiceUnavailable:
		return "GatewayServiceUnavailable"
	case Err_UserNotFound:
		return "UserNotFound"
	case Err_InvalidUserCredentials:
		return "InvalidUserCredentials"
	case Err_UserAlreadyExists:
		return "UserAlreadyExists"
	case Err_UserForbidden:
		return "UserForbidden"
	case Err_ProductNotFound:
		return "ProductNotFound"
	case Err_ProductOutOfStock:
		return "ProductOutOfStock"
	case Err_ProductInvalidRequest:
		return "ProductInvalidRequest"
	case Err_CartItemNotFound:
		return "CartItemNotFound"
	case Err_CartInvalidOperation:
		return "CartInvalidOperation"
	case Err_CartUpdateFailed:
		return "CartUpdateFailed"
	case Err_OrderNotFound:
		return "OrderNotFound"
	case Err_OrderInvalidStatus:
		return "OrderInvalidStatus"
	case Err_OrderCreationFailed:
		return "OrderCreationFailed"
	case Err_OrderCancellationFailed:
		return "OrderCancellationFailed"
	case Err_PaymentFailed:
		return "PaymentFailed"
	case Err_PaymentNotFound:
		return "PaymentNotFound"
	case Err_PaymentAuthorizationFailed:
		return "PaymentAuthorizationFailed"
	case Err_InventoryNotAvailable:
		return "InventoryNotAvailable"
	case Err_InventoryUpdateFailed:
		return "InventoryUpdateFailed"
	case Err_InventoryNotFound:
		return "InventoryNotFound"
	}
	return "<UNSET>"
}

func ErrFromString(s string) (Err, error) {
	switch s {
	case "UnknownError":
		return Err_UnknownError, nil
	case "BadRequest":
		return Err_BadRequest, nil
	case "Unauthorized":
		return Err_Unauthorized, nil
	case "Forbidden":
		return Err_Forbidden, nil
	case "NotFound":
		return Err_NotFound, nil
	case "InternalServerError":
		return Err_InternalServerError, nil
	case "ServiceUnavailable":
		return Err_ServiceUnavailable, nil
	case "ResponseUnableParse":
		return Err_ResponseUnableParse, nil
	case "GatewayBadRequest":
		return Err_GatewayBadRequest, nil
	case "GatewayTimeout":
		return Err_GatewayTimeout, nil
	case "GatewayServiceUnavailable":
		return Err_GatewayServiceUnavailable, nil
	case "UserNotFound":
		return Err_UserNotFound, nil
	case "InvalidUserCredentials":
		return Err_InvalidUserCredentials, nil
	case "UserAlreadyExists":
		return Err_UserAlreadyExists, nil
	case "UserForbidden":
		return Err_UserForbidden, nil
	case "ProductNotFound":
		return Err_ProductNotFound, nil
	case "ProductOutOfStock":
		return Err_ProductOutOfStock, nil
	case "ProductInvalidRequest":
		return Err_ProductInvalidRequest, nil
	case "CartItemNotFound":
		return Err_CartItemNotFound, nil
	case "CartInvalidOperation":
		return Err_CartInvalidOperation, nil
	case "CartUpdateFailed":
		return Err_CartUpdateFailed, nil
	case "OrderNotFound":
		return Err_OrderNotFound, nil
	case "OrderInvalidStatus":
		return Err_OrderInvalidStatus, nil
	case "OrderCreationFailed":
		return Err_OrderCreationFailed, nil
	case "OrderCancellationFailed":
		return Err_OrderCancellationFailed, nil
	case "PaymentFailed":
		return Err_PaymentFailed, nil
	case "PaymentNotFound":
		return Err_PaymentNotFound, nil
	case "PaymentAuthorizationFailed":
		return Err_PaymentAuthorizationFailed, nil
	case "InventoryNotAvailable":
		return Err_InventoryNotAvailable, nil
	case "InventoryUpdateFailed":
		return Err_InventoryUpdateFailed, nil
	case "InventoryNotFound":
		return Err_InventoryNotFound, nil
	}
	return Err(0), fmt.Errorf("not a valid Err string")
}

func ErrPtr(v Err) *Err { return &v }
func (p *Err) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Err(result.Int64)
	return
}

func (p *Err) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
